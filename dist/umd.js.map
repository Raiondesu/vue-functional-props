{"version":3,"file":"umd.js","sources":["../src/index.ts"],"sourcesContent":["import { Prop, FunctionalComponent, ExtractPropTypes, PropType } from 'vue';\n\ntype DefaultFactory<T> = (props: Record<string, unknown>) => T | null | undefined;\n\ninterface FakePropOptions<T = any, D = T> {\n  type?: () => any | (new () => any) | true | null;\n  required?: boolean;\n  default?: D | DefaultFactory<D> | null | undefined | object;\n  validator?(value: unknown): boolean;\n}\n\n/**\n * Creates a TS-valid vue prop definition from a simple object\n *\n * @template T desired complex type for the prop\n * @template D if default type is something specific - provide it here\n * @param options simple vue property definition\n */\nexport const prop = <T, D = T>() => <O extends FakePropOptions<T, D>>(options: O) => options as O & {\n  type: () => T;\n};\n\nexport type ObjectPropsTemplate = Readonly<Record<string, Prop<any>>>;\n\nexport type ArrayPropsTemplate = Readonly<Array<string>>;\n\nexport type ExtractArrayPropTypes<P extends ArrayPropsTemplate> = {\n  [idx in Extract<keyof P, number>]: Record<P[idx], any>;\n}[number];\n\nexport type ObjectEmitsOptions = Record<string, ((...args: any[]) => any) | null>;\n\nexport type EmitsOptions = ObjectEmitsOptions | string[];\n\nexport type ExtractProps<Props extends ObjectPropsTemplate | ArrayPropsTemplate> = Props extends ArrayPropsTemplate\n    ? ExtractArrayPropTypes<Props>\n    : ExtractPropTypes<Props>;\n\nexport interface FunctionalHusk<\n  Props extends ObjectPropsTemplate | ArrayPropsTemplate,\n  Events extends EmitsOptions\n> {\n  withProps: <\n    P extends ObjectPropsTemplate | ArrayPropsTemplate\n  >(props: P) => FunctionalHusk<P, Events>;\n\n  emits: <\n    E extends EmitsOptions\n  >(events: E) => FunctionalHusk<Props, E>;\n\n  setup: (setup: FunctionalComponent<ExtractProps<Props>, Events>) => FunctionalComponent<ExtractProps<Props>, Events>;\n};\n\n/**\n * A simple function wrapper that accepts a component name and inheritAttrs flag, and adds them to the setup function definition\n * via calling the setup function on the resulting object\n *\n * @param name component's display name\n * @param inheritAttrs disables component's ability to forward attrs automatically to the root node\n * @returns setup builder\n */\nexport const component = <\n  P extends ObjectPropsTemplate | ArrayPropsTemplate,\n  E extends EmitsOptions\n>(\n  name: string,\n  inheritAttrs: boolean = true,\n  props?: P,\n  events?: E\n): FunctionalHusk<P, E> => ({\n  withProps: props => component(name, inheritAttrs, props, events),\n  emits: events => component(name, inheritAttrs, props, events),\n  setup: setup => (\n    setup.inheritAttrs = inheritAttrs,\n    setup.displayName = name,\n    setup.emits = events,\n    setup.props = props as any,\n    setup\n  )\n});\n\n/**\n * A simple function wrapper that accepts a standard vue props object definition and a setup function and adds props to the setup function definition\n *\n * @param props a props object definition\n * @param setup vue composition api setup function\n * @returns the same setup function\n */\nexport const withProps: {\n  /**\n   * A simple function wrapper that accepts a standard vue props object definition and a setup function and adds props to the setup function definition\n   *\n   * @param props a props object definition\n   * @param setup vue composition api setup function\n   * @returns the same setup function\n   */\n  <\n    P extends ObjectPropsTemplate,\n    S extends FunctionalComponent<ExtractPropTypes<P, true>, any>\n  >(props: P, setup: S): S;\n\n\n  /**\n   * A simple function wrapper that accepts a standard vue props array definition and a setup function and adds props to the setup function definition\n   *\n   * @param props a props array definition\n   * @param setup vue composition api setup function\n   * @returns the same setup function\n   */\n  <\n    P extends ArrayPropsTemplate,\n    S extends FunctionalComponent<ExtractArrayPropTypes<P>>\n  >(props: P, setup: S): S\n} = <P, S>(props: P, setup: S): S => (\n  (setup as any).props = props,\n  setup\n);\n"],"names":["component","name","inheritAttrs","props","events","withProps","emits","setup","displayName","options"],"mappings":"2QA6DyB,SAAZA,EAIXC,OACAC,6DACAC,yCACAC,+CAC0B,CAC1BC,UAAW,SAAAF,UAASH,EAAUC,EAAMC,EAAcC,EAAOC,IACzDE,MAAO,SAAAF,UAAUJ,EAAUC,EAAMC,EAAcC,EAAOC,IACtDG,MAAO,SAAAA,UACLA,EAAML,aAAeA,EACrBK,EAAMC,YAAcP,EACpBM,EAAMD,MAAQF,EACdG,EAAMJ,MAAQA,EACdI,YA3DgB,kBAAgB,SAAkCE,UAAeA,gBA+FjF,SAAON,EAAUI,UAClBA,EAAcJ,MAAQA,EACvBI"}